class Solution {
public:
    bool isVowel_char(char c) {
        return c=='a' || c=='e' || c=='i' || c=='o' || c=='u';
    }
    bool isVowel_string(string s) {
        return !(s.empty()) && isVowel_char(s.front()) && isVowel_char(s.back());
    }
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        vector<int>prefix(words.size()+1,0);
        for(int i=1; i<words.size()+1; i++) {
            prefix[i] = prefix[i-1] + isVowel_string(words[i-1]);
        }
        vector<int>ans;
        for(const auto&query : queries) {
            int start = query[0];
            int end = query[1];

            int count = prefix[end+1]-prefix[start];

            ans.push_back(count);
        }

        return ans;
    }
};
